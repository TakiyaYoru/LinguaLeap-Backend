// ===============================================
// AI SERVICE - CLAUDE INTEGRATION (COMPLETE ENHANCED VERSION)
// ===============================================

import Anthropic from '@anthropic-ai/sdk';
import dotenv from 'dotenv';

dotenv.config();

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

// ===============================================
// ENHANCED JSON PARSER CLASS
// ===============================================

class EnhancedJSONParser {
  
  // L√†m s·∫°ch k√Ω t·ª± ƒë·∫∑c bi·ªát v√† smart quotes
  static cleanSpecialCharacters(text) {
    return text
      // X·ª≠ l√Ω smart quotes (t·ª´ AI th∆∞·ªùng t·∫°o ra)
      .replace(/[\u2018\u2019]/g, "'")    // ' ' ‚Üí '
      .replace(/[\u201C\u201D]/g, '"')    // " " ‚Üí "
      .replace(/[\u2013\u2014]/g, "-")    // ‚Äì ‚Äî ‚Üí -
      
      // X·ª≠ l√Ω c√°c k√Ω t·ª± Unicode kh√°c
      .replace(/[\u00A0]/g, " ")          // Non-breaking space ‚Üí regular space
      .replace(/[\u2026]/g, "...")        // ‚Ä¶ ‚Üí ...
      
      // Lo·∫°i b·ªè k√Ω t·ª± control chars
      .replace(/[\x00-\x1F\x7F-\x9F]/g, "")
      
      // Normalize whitespace
      .replace(/\s+/g, " ")
      .trim();
  }
  
  // T√¨m v√† extract JSON blocks t·ª´ text
  static extractJSONBlocks(content) {
    const jsonBlocks = [];
    
    // Method 1: Simple regex pattern
    const simplePattern = /\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}/g;
    let matches = content.match(simplePattern);
    if (matches) {
      jsonBlocks.push(...matches);
    }
    
    // Method 2: Bracket counting for nested JSON
    let braceCount = 0;
    let start = -1;
    let inString = false;
    let escaped = false;
    
    for (let i = 0; i < content.length; i++) {
      const char = content[i];
      
      if (escaped) {
        escaped = false;
        continue;
      }
      
      if (char === '\\') {
        escaped = true;
        continue;
      }
      
      if (char === '"') {
        inString = !inString;
        continue;
      }
      
      if (!inString) {
        if (char === '{') {
          if (braceCount === 0) start = i;
          braceCount++;
        } else if (char === '}') {
          braceCount--;
          if (braceCount === 0 && start !== -1) {
            const block = content.substring(start, i + 1);
            if (!jsonBlocks.includes(block)) {
              jsonBlocks.push(block);
            }
          }
        }
      }
    }
    
    return jsonBlocks;
  }
  
  // S·ª≠a l·ªói JSON th∆∞·ªùng g·∫∑p
  static fixCommonJSONErrors(jsonString) {
    return jsonString
      // Fix trailing commas
      .replace(/,(\s*[}\]])/g, '$1')
      
      // Fix missing quotes around keys
      .replace(/([{,]\s*)([a-zA-Z_][a-zA-Z0-9_]*)\s*:/g, '$1"$2":')
      
      // Fix single quotes to double quotes (nh∆∞ng kh√¥ng trong n·ªôi dung)
      .replace(/'([^']*)':/g, '"$1":')
      
      // Fix newlines v√† tabs trong strings
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/\t/g, '\\t')
      
      // Fix multiple spaces
      .replace(/\s+/g, ' ')
      .trim();
  }
  
  // Escape unescaped quotes trong feedback sections v√† t·∫•t c·∫£ strings
  static fixFeedbackQuotes(jsonString) {
    // Fix 1: X·ª≠ l√Ω feedback sections
    let fixed = jsonString.replace(
      /"feedback"\s*:\s*\{([^}]+)\}/g,
      (match, feedbackContent) => {
        // Fix quotes inside feedback values
        const fixedContent = feedbackContent.replace(
          /"([^"]*)":\s*"([^"]*)"([^"]*)"([^"]*)"/g,
          (valueMatch, key, p1, p2, p3) => {
            if (p2 && p3) {
              // C√≥ unescaped quotes trong value
              return `"${key}": "${p1}\\"${p2}\\"${p3}"`;
            }
            return valueMatch;
          }
        );
        return `"feedback": {${fixedContent}}`;
      }
    );

    // Fix 2: X·ª≠ l√Ω t·∫•t c·∫£ string values c√≥ unescaped quotes
    fixed = fixed.replace(
      /"([^"]*)":\s*"([^"\\]*)("([^"\\]*)")*([^"]*)"/g,
      (match, key, start, middle, middleContent, end) => {
        if (middle && middleContent !== undefined) {
          // C√≥ quotes ch∆∞a escaped trong value
          const escapedValue = `${start}\\"${middleContent}\\"${end}`;
          return `"${key}": "${escapedValue}"`;
        }
        return match;
      }
    );

    // Fix 3: Pattern ƒë·∫∑c bi·ªát cho c√°c tr∆∞·ªùng h·ª£p nh∆∞ "Good morning" trong feedback
    fixed = fixed.replace(
      /"(correct|incorrect|hint)"\s*:\s*"([^"]*)"([^"]*)"([^"]*)"/g,
      (match, field, p1, p2, p3) => {
        if (p2 && p3) {
          return `"${field}": "${p1}\\"${p2}\\"${p3}"`;
        }
        return match;
      }
    );

    return fixed;
  }
  
  // Parse JSON v·ªõi nhi·ªÅu strategies
  static parseWithStrategies(content) {
    console.log('üîç Attempting to parse JSON from content...');
    
    const strategies = [
      // Strategy 1: Direct parse
      {
        name: "Direct Parse",
        method: () => JSON.parse(content)
      },
      
      // Strategy 2: Clean special chars first
      {
        name: "Clean Special Characters",
        method: () => {
          const cleaned = this.cleanSpecialCharacters(content);
          return JSON.parse(cleaned);
        }
      },
      
      // Strategy 3: Fix feedback quotes
      {
        name: "Fix Feedback Quotes",
        method: () => {
          let fixed = this.fixFeedbackQuotes(content);
          fixed = this.cleanSpecialCharacters(fixed);
          return JSON.parse(fixed);
        }
      },
      
      // Strategy 4: Extract JSON blocks
      {
        name: "Extract JSON Blocks", 
        method: () => {
          const blocks = this.extractJSONBlocks(content);
          for (const block of blocks) {
            try {
              return JSON.parse(block);
            } catch (e) {
              // Try fixing the block
              try {
                const fixed = this.fixFeedbackQuotes(block);
                return JSON.parse(fixed);
              } catch (e2) {
                continue;
              }
            }
          }
          throw new Error('No valid JSON found in blocks');
        }
      },
      
      // Strategy 5: Fix common errors then parse
      {
        name: "Fix Common Errors",
        method: () => {
          let fixed = this.fixCommonJSONErrors(content);
          fixed = this.fixFeedbackQuotes(fixed);
          return JSON.parse(fixed);
        }
      },
      
      // Strategy 6: Aggressive cleaning v·ªõi better quote handling
      {
        name: "Aggressive Cleaning",
        method: () => {
          let cleaned = content
            // Remove all non-printable characters except Vietnamese
            .replace(/[^\x20-\x7E\u00A0-\u024F\u1E00-\u1EFF\u0100-\u017F]/g, '')
            
            // Replace smart quotes
            .replace(/[""]/g, '"')
            .replace(/['']/g, "'")
            
            // Fix specific patterns that cause issues
            .replace(/"([^"]*)"([^"]*)"([^"]*)"(?=\s*[,}])/g, (match, p1, p2, p3) => {
              // Pattern: "text"more text"end" -> "text\"more text\"end"
              return `"${p1}\\"${p2}\\"${p3}"`;
            })
            
            // Fix pattern: "key": "value"internal"text"
            .replace(/:\s*"([^"]*)"([^"]*)"([^"]*)"(?=\s*[,}])/g, (match, p1, p2, p3) => {
              return `: "${p1}\\"${p2}\\"${p3}"`;
            })
            
            // Fix standalone quoted words in strings like: "Good morning"
            .replace(/"\s*([^"]+)\s*"\s*([^"]+)\s*"/g, (match, quoted, rest) => {
              return `"${quoted} ${rest}"`;
            });
          
          // Find JSON part
          const start = cleaned.indexOf('{');
          const end = cleaned.lastIndexOf('}') + 1;
          
          if (start !== -1 && end > start) {
            cleaned = cleaned.substring(start, end);
          }
          
          return JSON.parse(cleaned);
        }
      },
      
      // Strategy 8: Ultra aggressive quote fixing
      {
        name: "Ultra Aggressive Quote Fixing",
        method: () => {
          let fixed = content;
          
          // Step 1: Replace all smart quotes
          fixed = fixed.replace(/[""]/g, '"').replace(/['']/g, "'");
          
          // Step 2: Find and fix all problematic quote patterns
          // Pattern: "value" trong string values
          fixed = fixed.replace(
            /("(?:correct|incorrect|hint|statement|question|sentence)"\s*:\s*")([^"]*)"([^"]*)"([^"]*?)(")/g,
            (match, start, p1, p2, p3, end) => {
              return `${start}${p1}\\"${p2}\\"${p3}${end}`;
            }
          );
          
          // Step 3: Handle edge cases v·ªõi multiple quotes
          fixed = fixed.replace(
            /(":\s*")([^"]*)"([^"]*)"([^"]*)"([^"]*?)(")/g,
            (match, start, p1, p2, p3, p4, end) => {
              return `${start}${p1}\\"${p2}\\"${p3}\\"${p4}${end}`;
            }
          );
          
          // Step 4: Last resort - remove problematic characters
          fixed = fixed.replace(/[\u201C\u201D\u2018\u2019]/g, '');
          
          return JSON.parse(fixed);
        }
      }
    ];
    
    // Th·ª≠ t·ª´ng strategy
    for (let i = 0; i < strategies.length; i++) {
      try {
        console.log(`üìù Trying strategy ${i + 1}: ${strategies[i].name}`);
        const result = strategies[i].method();
        console.log(`‚úÖ JSON parsed successfully with strategy: ${strategies[i].name}`);
        return result;
      } catch (error) {
        console.warn(`‚ö†Ô∏è Strategy "${strategies[i].name}" failed: ${error.message}`);
        if (i === strategies.length - 1) {
          throw new Error(`All parsing strategies failed. Last error: ${error.message}`);
        }
      }
    }
  }
}

// ===============================================
// ENHANCED PROMPT TEMPLATES WITH SKILL FOCUS
// ===============================================

const EXERCISE_TEMPLATES = {
  multiple_choice: {
    system_context: `B·∫°n l√† gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp cho ng∆∞·ªùi Vi·ªát Nam level {user_level}.
B·∫°n t·∫°o b√†i t·∫≠p multiple choice ph√π h·ª£p vƒÉn h√≥a Vi·ªát Nam.`,
    
    main_prompt: `D·ª±a tr√™n y√™u c·∫ßu: "{user_context}"

T·∫°o c√¢u h·ªèi multiple choice v·ªÅ ch·ªß ƒë·ªÅ c∆° b·∫£n cho ng∆∞·ªùi h·ªçc ti·∫øng Anh.
    
Y√™u c·∫ßu:
- C√¢u h·ªèi th·ª±c t·∫ø, d·ªÖ hi·ªÉu, ph√π h·ª£p level {user_level}
- 4 ƒë√°p √°n: 1 ƒë√∫ng, 3 sai h·ª£p l√Ω  
- ƒê√°p √°n sai c√πng ch·ªß ƒë·ªÅ nh∆∞ng r√µ r√†ng sai
- Tr√°nh ng·ªØ ph√°p ph·ª©c t·∫°p
- N·∫øu c√≥ t·ª´ v·ª±ng c·ª• th·ªÉ, s·ª≠ d·ª•ng t·ª´ ƒë√≥ l√†m c√¢u h·ªèi ch√≠nh

QUAN TR·ªåNG - JSON RULES:
- Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text kh√°c
- KH√îNG s·ª≠ d·ª•ng d·∫•u ngo·∫∑c k√©p trong feedback content
- Thay d·∫•u ngo·∫∑c k√©p b·∫±ng t·ª´ ng·ªØ m√¥ t·∫£ ho·∫∑c d·∫•u nh√°y ƒë∆°n
- Feedback ng·∫Øn g·ªçn, tr√°nh k√Ω t·ª± ƒë·∫∑c bi·ªát

JSON format:
{
  "question": "C√¢u h·ªèi b·∫±ng ti·∫øng Anh",
  "options": ["ƒê√°p √°n A", "ƒê√°p √°n B", "ƒê√°p √°n C", "ƒê√°p √°n D"],
  "correctAnswer": 0,
  "feedback": {
    "correct": "ƒê√∫ng r·ªìi! Gi·∫£i th√≠ch kh√¥ng c√≥ d·∫•u ngo·∫∑c k√©p",
    "incorrect": "Sai r·ªìi, th·ª≠ l·∫°i!",
    "hint": "G·ª£i √Ω ng·∫Øn g·ªçn"
  }
}`,
    
    expected_output_format: {
      question: "string",
      options: ["string1", "string2", "string3", "string4"],
      correctAnswer: "number",
      feedback: {
        correct: "string",
        incorrect: "string",
        hint: "string"
      }
    },
    
    fallback_template: {
      question: "What is the English word for s·ªë hai?",
      options: ["two", "one", "three", "four"],
      correctAnswer: 0,
      feedback: {
        correct: "Correct! s·ªë hai means two in English.",
        incorrect: "Not quite right. Try again!",
        hint: "Think about counting numbers in English."
      }
    }
  },

  fill_blank: {
    system_context: `B·∫°n l√† gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp cho ng∆∞·ªùi Vi·ªát Nam level {user_level}.
B·∫°n t·∫°o b√†i t·∫≠p fill blank ph√π h·ª£p vƒÉn h√≥a Vi·ªát Nam.`,
    
    main_prompt: `D·ª±a tr√™n y√™u c·∫ßu: "{user_context}"

T·∫°o c√¢u ƒëi·ªÅn t·ª´ cho ng∆∞·ªùi h·ªçc ti·∫øng Anh.
    
Y√™u c·∫ßu:
- C√¢u ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu, ph√π h·ª£p level {user_level}
- S·ª≠ d·ª•ng _____ ƒë·ªÉ ƒë√°nh d·∫•u ch·ªó tr·ªëng
- T·ª´ c·∫ßn ƒëi·ªÅn ph√π h·ª£p ng·ªØ c·∫£nh
- C√≥ th·ªÉ c√≥ 1-2 t·ª´ thay th·∫ø
- N·∫øu c√≥ t·ª´ v·ª±ng c·ª• th·ªÉ, s·ª≠ d·ª•ng t·ª´ ƒë√≥ l√†m t·ª´ c·∫ßn ƒëi·ªÅn

QUAN TR·ªåNG - JSON RULES:
- Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text kh√°c
- KH√îNG s·ª≠ d·ª•ng d·∫•u ngo·∫∑c k√©p trong feedback content
- Thay d·∫•u ngo·∫∑c k√©p b·∫±ng t·ª´ ng·ªØ m√¥ t·∫£
- Feedback ng·∫Øn g·ªçn, tr√°nh k√Ω t·ª± ƒë·∫∑c bi·ªát

JSON format:
{
  "sentence": "C√¢u c√≥ ch·ªó tr·ªëng b·∫±ng ti·∫øng Anh",
  "correctAnswer": "T·ª´ ƒë√∫ng",
  "alternatives": ["T·ª´ thay th·∫ø 1", "T·ª´ thay th·∫ø 2"],
  "feedback": {
    "correct": "ƒê√∫ng r·ªìi! Gi·∫£i th√≠ch kh√¥ng c√≥ d·∫•u ngo·∫∑c k√©p",
    "incorrect": "Sai r·ªìi, th·ª≠ l·∫°i!",
    "hint": "G·ª£i √Ω ng·∫Øn g·ªçn"
  }
}`,
    
    expected_output_format: {
      sentence: "string",
      correctAnswer: "string",
      alternatives: ["string1", "string2"],
      feedback: {
        correct: "string",
        incorrect: "string",
        hint: "string"
      }
    },
    
    fallback_template: {
      sentence: "I say _____ when I meet my friends.",
      correctAnswer: "hello",
      alternatives: ["hi", "hey"],
      feedback: {
        correct: "Correct! hello is a common greeting.",
        incorrect: "Not quite right. Try again!",
        hint: "Think about common greetings in English."
      }
    }
  },

  // TRUE/FALSE with Skill Focus Support
  true_false: {
    system_context: `B·∫°n l√† gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp cho ng∆∞·ªùi Vi·ªát Nam level {user_level}.
B·∫°n t·∫°o b√†i t·∫≠p true/false v·ªõi m·ª•c ƒë√≠ch h·ªçc ti·∫øng Anh hi·ªáu qu·∫£.`,
    
    main_prompt: `D·ª±a tr√™n y√™u c·∫ßu: "{user_context}"
{skill_focus_prompt}

T·∫°o c√¢u ƒë√∫ng/sai cho ng∆∞·ªùi h·ªçc ti·∫øng Anh.
    
Y√™u c·∫ßu chung:
- C√¢u kh·∫≥ng ƒë·ªãnh r√µ r√†ng, d·ªÖ hi·ªÉu, ph√π h·ª£p level {user_level}
- C√≥ th·ªÉ ƒë√∫ng ho·∫∑c sai m·ªôt c√°ch h·ª£p l√Ω
- N·ªôi dung th·ª±c t·∫ø, g·∫ßn g≈©i v·ªõi cu·ªôc s·ªëng h√†ng ng√†y
- Tr√°nh c√¢u ph·ª©c t·∫°p ho·∫∑c m∆° h·ªì

QUAN TR·ªåNG - JSON RULES:
- Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text kh√°c
- KH√îNG s·ª≠ d·ª•ng d·∫•u ngo·∫∑c k√©p trong feedback content
- Thay d·∫•u ngo·∫∑c k√©p b·∫±ng t·ª´ ng·ªØ m√¥ t·∫£
- Feedback ng·∫Øn g·ªçn, tr√°nh k√Ω t·ª± ƒë·∫∑c bi·ªát

JSON format:
{
  "statement": "C√¢u kh·∫≥ng ƒë·ªãnh b·∫±ng ti·∫øng Anh",
  "isTrue": true,
  "feedback": {
    "correct": "ƒê√∫ng r·ªìi! Gi·∫£i th√≠ch ng·∫Øn g·ªçn kh√¥ng c√≥ d·∫•u ngo·∫∑c k√©p",
    "incorrect": "Sai r·ªìi! Gi·∫£i th√≠ch ng·∫Øn g·ªçn",
    "hint": "G·ª£i √Ω ng·∫Øn g·ªçn"
  }{skill_focus_fields}
}`,
    
    expected_output_format: {
      statement: "string",
      isTrue: "boolean",
      feedback: {
        correct: "string",
        incorrect: "string",
        hint: "string"
      }
    },
    
    fallback_template: {
      statement: "The sun rises in the east.",
      isTrue: true,
      feedback: {
        correct: "Correct! The sun always rises in the east.",
        incorrect: "Not quite right. The sun rises in the east.",
        hint: "Think about the direction of sunrise."
      }
    }
  },

  // TRUE/FALSE - Vocabulary Focus
  true_false_vocabulary: {
    system_context: `B·∫°n l√† gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp cho ng∆∞·ªùi Vi·ªát Nam level {user_level}.
B·∫°n t·∫°o b√†i t·∫≠p true/false t·∫≠p trung v√†o t·ª´ v·ª±ng (Vocabulary).`,
    
    main_prompt: `D·ª±a tr√™n y√™u c·∫ßu: "{user_context}"
Skill Focus: Vocabulary
Ch·ªß ƒë·ªÅ: {topic}

T·∫°o c√¢u ƒë√∫ng/sai t·∫≠p trung v√†o ki·ªÉm tra hi·ªÉu bi·∫øt t·ª´ v·ª±ng.

Y√™u c·∫ßu c·ª• th·ªÉ cho Vocabulary:
- Ki·ªÉm tra nghƒ©a c·ªßa t·ª´, c·ª•m t·ª´
- S·ª≠ d·ª•ng t·ª´ trong ng·ªØ c·∫£nh ph√π h·ª£p
- Ph√¢n bi·ªát t·ª´ ƒë·ªìng nghƒ©a/tr√°i nghƒ©a
- Ki·ªÉm tra t·ª´ lo·∫°i (noun, verb, adjective...)
- Ph√π h·ª£p level {user_level}

QUAN TR·ªåNG - JSON RULES:
- Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text kh√°c
- KH√îNG s·ª≠ d·ª•ng d·∫•u ngo·∫∑c k√©p trong feedback content
- T·∫≠p trung v√†o ki·∫øn th·ª©c t·ª´ v·ª±ng

JSON format:
{
  "statement": "C√¢u kh·∫≥ng ƒë·ªãnh v·ªÅ t·ª´ v·ª±ng ƒë·ªÉ ƒë√°nh gi√°",
  "isTrue": true,
  "feedback": {
    "correct": "ƒê√∫ng r·ªìi! Gi·∫£i th√≠ch v·ªÅ t·ª´ v·ª±ng kh√¥ng c√≥ d·∫•u ngo·∫∑c k√©p",
    "incorrect": "Sai r·ªìi! Gi·∫£i th√≠ch v·ªÅ t·ª´ v·ª±ng",
    "hint": "G·ª£i √Ω v·ªÅ t·ª´ v·ª±ng"
  },
  "vocabulary_focus": {
    "target_word": "T·ª´ ch√≠nh ƒë∆∞·ª£c ki·ªÉm tra",
    "word_type": "noun",
    "difficulty": "beginner"
  },
  "skill_focus": "vocabulary",
  "topic": "{topic}"
}`,
    
    expected_output_format: {
      statement: "string",
      isTrue: "boolean",
      feedback: {
        correct: "string",
        incorrect: "string",
        hint: "string"
      },
      vocabulary_focus: {
        target_word: "string",
        word_type: "string",
        difficulty: "string"
      },
      skill_focus: "vocabulary",
      topic: "string"
    },
    
    fallback_template: {
      statement: "The word happy is a noun in English.",
      isTrue: false,
      feedback: {
        correct: "Correct! Happy l√† t√≠nh t·ª´ (adjective), kh√¥ng ph·∫£i danh t·ª´ (noun).",
        incorrect: "Not quite right. Happy is an adjective, not a noun.",
        hint: "Think about what type of word happy is."
      },
      vocabulary_focus: {
        target_word: "happy",
        word_type: "adjective",
        difficulty: "beginner"
      },
      skill_focus: "vocabulary",
      topic: "emotions"
    }
  },

  // TRUE/FALSE - Listening Focus
  true_false_listening: {
    system_context: `B·∫°n l√† gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp cho ng∆∞·ªùi Vi·ªát Nam level {user_level}.
B·∫°n t·∫°o b√†i t·∫≠p true/false t·∫≠p trung v√†o k·ªπ nƒÉng nghe (Listening).`,
    
    main_prompt: `D·ª±a tr√™n y√™u c·∫ßu: "{user_context}"
Skill Focus: Listening
Ch·ªß ƒë·ªÅ: {topic}

T·∫°o c√¢u ƒë√∫ng/sai t·∫≠p trung v√†o ki·ªÉm tra k·ªπ nƒÉng nghe hi·ªÉu.

Y√™u c·∫ßu c·ª• th·ªÉ cho Listening:
- Ki·ªÉm tra kh·∫£ nƒÉng ph√¢n bi·ªát √¢m thanh
- Hi·ªÉu n·ªôi dung t·ª´ audio (m√¥ t·∫£ audio content)
- Nh·∫≠n bi·∫øt tr·ªçng √¢m, ng·ªØ ƒëi·ªáu
- Ph√¢n bi·ªát t·ª´ ƒë·ªìng √¢m kh√°c nghƒ©a
- Hi·ªÉu ng·ªØ c·∫£nh t·ª´ √¢m thanh
- Ph√π h·ª£p level {user_level}

QUAN TR·ªåNG - JSON RULES:
- Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text kh√°c
- KH√îNG s·ª≠ d·ª•ng d·∫•u ngo·∫∑c k√©p trong feedback content
- T·∫≠p trung v√†o kh·∫£ nƒÉng nghe hi·ªÉu

JSON format:
{
  "statement": "C√¢u kh·∫≥ng ƒë·ªãnh v·ªÅ n·ªôi dung nghe ƒë·ªÉ ƒë√°nh gi√°",
  "isTrue": true,
  "feedback": {
    "correct": "ƒê√∫ng r·ªìi! Gi·∫£i th√≠ch v·ªÅ n·ªôi dung nghe",
    "incorrect": "Sai r·ªìi! Gi·∫£i th√≠ch v·ªÅ n·ªôi dung nghe",
    "hint": "G·ª£i √Ω v·ªÅ vi·ªác nghe"
  },
  "listening_focus": {
    "audio_content": "M√¥ t·∫£ n·ªôi dung audio s·∫Ω nghe",
    "listening_skill": "comprehension",
    "audio_length": "5 seconds",
    "difficulty": "beginner"
  },
  "skill_focus": "listening",
  "topic": "{topic}"
}`,
    
    expected_output_format: {
      statement: "string",
      isTrue: "boolean",
      feedback: {
        correct: "string",
        incorrect: "string",
        hint: "string"
      },
      listening_focus: {
        audio_content: "string",
        listening_skill: "string",
        audio_length: "string",
        difficulty: "string"
      },
      skill_focus: "listening",
      topic: "string"
    },
    
    fallback_template: {
      statement: "In the audio, the speaker says Good afternoon.",
      isTrue: false,
      feedback: {
        correct: "Correct! Trong audio, ng∆∞·ªùi n√≥i n√≥i Good morning, kh√¥ng ph·∫£i Good afternoon.",
        incorrect: "Not quite right. Listen again to what the speaker says.",
        hint: "Pay attention to the time of day mentioned."
      },
      listening_focus: {
        audio_content: "A person greeting someone in the morning",
        listening_skill: "comprehension",
        audio_length: "3 seconds",
        difficulty: "beginner"
      },
      skill_focus: "listening",
      topic: "greetings"
    }
  },

  // TRUE/FALSE - Grammar Focus
  true_false_grammar: {
    system_context: `B·∫°n l√† gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp cho ng∆∞·ªùi Vi·ªát Nam level {user_level}.
B·∫°n t·∫°o b√†i t·∫≠p true/false t·∫≠p trung v√†o ng·ªØ ph√°p (Grammar).`,
    
    main_prompt: `D·ª±a tr√™n y√™u c·∫ßu: "{user_context}"
Skill Focus: Grammar
Ch·ªß ƒë·ªÅ: {topic}

T·∫°o c√¢u ƒë√∫ng/sai t·∫≠p trung v√†o ki·ªÉm tra ki·∫øn th·ª©c ng·ªØ ph√°p.

Y√™u c·∫ßu c·ª• th·ªÉ cho Grammar:
- Ki·ªÉm tra c·∫•u tr√∫c c√¢u, th√¨ ƒë·ªông t·ª´
- S·ª≠ d·ª•ng ƒë√∫ng t·ª´ lo·∫°i, gi·ªõi t·ª´
- Quy t·∫Øc ng·ªØ ph√°p c∆° b·∫£n
- C√°ch s·∫Øp x·∫øp t·ª´ trong c√¢u
- So s√°nh, ƒëi·ªÅu ki·ªán, b·ªã ƒë·ªông...
- Ph√π h·ª£p level {user_level}

QUAN TR·ªåNG - JSON RULES:
- Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text kh√°c
- KH√îNG s·ª≠ d·ª•ng d·∫•u ngo·∫∑c k√©p trong feedback content
- T·∫≠p trung v√†o quy t·∫Øc ng·ªØ ph√°p

JSON format:
{
  "statement": "C√¢u kh·∫≥ng ƒë·ªãnh v·ªÅ ng·ªØ ph√°p ƒë·ªÉ ƒë√°nh gi√°",
  "isTrue": true,
  "feedback": {
    "correct": "ƒê√∫ng r·ªìi! Gi·∫£i th√≠ch quy t·∫Øc ng·ªØ ph√°p",
    "incorrect": "Sai r·ªìi! Gi·∫£i th√≠ch quy t·∫Øc ng·ªØ ph√°p",
    "hint": "G·ª£i √Ω v·ªÅ ng·ªØ ph√°p"
  },
  "grammar_focus": {
    "grammar_point": "ƒêi·ªÉm ng·ªØ ph√°p ƒë∆∞·ª£c ki·ªÉm tra",
    "rule_type": "tense",
    "example_correct": "V√≠ d·ª• c√¢u ƒë√∫ng",
    "difficulty": "beginner"
  },
  "skill_focus": "grammar",
  "topic": "{topic}"
}`,
    
    expected_output_format: {
      statement: "string",
      isTrue: "boolean",
      feedback: {
        correct: "string",
        incorrect: "string",
      hint: "string"
      },
      grammar_focus: {
        grammar_point: "string",
        rule_type: "string",
        example_correct: "string",
        difficulty: "string"
      },
      skill_focus: "grammar",
      topic: "string"
    },
    
    fallback_template: {
      statement: "The sentence I am go to school is grammatically correct.",
      isTrue: false,
      feedback: {
        correct: "Correct! C√¢u ƒë√∫ng ph·∫£i l√† I go to school ho·∫∑c I am going to school.",
        incorrect: "Not quite right. The sentence has a grammar error.",
        hint: "Think about present tense vs present continuous."
      },
      grammar_focus: {
        grammar_point: "Present tense vs Present continuous",
        rule_type: "tense",
        example_correct: "I go to school every day",
        difficulty: "beginner"
      },
      skill_focus: "grammar",
      topic: "daily_activities"
    }
  },

  // Keep other existing templates...
  translation: {
    system_context: `B·∫°n l√† gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp cho ng∆∞·ªùi Vi·ªát Nam level {user_level}.
B·∫°n t·∫°o b√†i t·∫≠p translation ph√π h·ª£p vƒÉn h√≥a Vi·ªát Nam.`,
    
    main_prompt: `D·ª±a tr√™n y√™u c·∫ßu: "{user_context}"

T·∫°o b√†i t·∫≠p d·ªãch thu·∫≠t cho ng∆∞·ªùi h·ªçc ti·∫øng Anh.
    
Y√™u c·∫ßu:
- C√¢u ti·∫øng Anh ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu, ph√π h·ª£p level {user_level}
- B·∫£n d·ªãch ti·∫øng Vi·ªát ch√≠nh x√°c v√† t·ª± nhi√™n
- N·ªôi dung th·ª±c t·∫ø, g·∫ßn g≈©i v·ªõi cu·ªôc s·ªëng h√†ng ng√†y
- N·∫øu c√≥ t·ª´ v·ª±ng c·ª• th·ªÉ, s·ª≠ d·ª•ng t·ª´ ƒë√≥ trong c√¢u
- Tr√°nh c√¢u ph·ª©c t·∫°p ho·∫∑c m∆° h·ªì

QUAN TR·ªåNG - JSON RULES:
- Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text kh√°c
- KH√îNG s·ª≠ d·ª•ng d·∫•u ngo·∫∑c k√©p trong feedback content
- Feedback ng·∫Øn g·ªçn, tr√°nh k√Ω t·ª± ƒë·∫∑c bi·ªát

JSON format:
{
  "sourceText": "C√¢u ti·∫øng Anh c·∫ßn d·ªãch",
  "targetText": "B·∫£n d·ªãch ti·∫øng Vi·ªát ch√≠nh x√°c",
  "feedback": {
    "correct": "ƒê√∫ng r·ªìi! Gi·∫£i th√≠ch ng·∫Øn g·ªçn",
    "incorrect": "Sai r·ªìi, th·ª≠ l·∫°i! Gi·∫£i th√≠ch ng·∫Øn g·ªçn",
    "hint": "G·ª£i √Ω ng·∫Øn g·ªçn"
  }
}`,
    
    expected_output_format: {
      sourceText: "string",
      targetText: "string",
      feedback: {
        correct: "string",
        incorrect: "string",
        hint: "string"
      }
    },
    
    fallback_template: {
      sourceText: "Hello, how are you?",
      targetText: "Xin ch√†o, b·∫°n kh·ªèe kh√¥ng?",
      feedback: {
        correct: "Correct! B·∫£n d·ªãch ch√≠nh x√°c v√† t·ª± nhi√™n.",
        incorrect: "Not quite right. H√£y ch√∫ √Ω ƒë·∫øn ng·ªØ c·∫£nh ch√†o h·ªèi.",
        hint: "ƒê√¢y l√† c√¢u ch√†o h·ªèi th√¥ng d·ª•ng."
      }
    }
  },

  word_matching: {
    system_context: `B·∫°n l√† gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp cho ng∆∞·ªùi Vi·ªát Nam level {user_level}.
B·∫°n t·∫°o b√†i t·∫≠p word matching ph√π h·ª£p vƒÉn h√≥a Vi·ªát Nam.`,
    
    main_prompt: `D·ª±a tr√™n y√™u c·∫ßu: "{user_context}"

T·∫°o b√†i t·∫≠p gh√©p t·ª´ ti·∫øng Anh v·ªõi nghƒ©a ti·∫øng Vi·ªát.
    
Y√™u c·∫ßu:
- 4-5 c·∫∑p t·ª´ ph√π h·ª£p level {user_level}
- T·ª´ ti·∫øng Anh ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu
- Nghƒ©a ti·∫øng Vi·ªát ch√≠nh x√°c v√† t·ª± nhi√™n
- N·ªôi dung th·ª±c t·∫ø, g·∫ßn g≈©i v·ªõi cu·ªôc s·ªëng h√†ng ng√†y
- N·∫øu c√≥ t·ª´ v·ª±ng c·ª• th·ªÉ, s·ª≠ d·ª•ng t·ª´ ƒë√≥
- Tr√°nh t·ª´ ph·ª©c t·∫°p ho·∫∑c m∆° h·ªì

QUAN TR·ªåNG - JSON RULES:
- Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text kh√°c
- KH√îNG s·ª≠ d·ª•ng d·∫•u ngo·∫∑c k√©p trong feedback content
- Feedback ng·∫Øn g·ªçn, tr√°nh k√Ω t·ª± ƒë·∫∑c bi·ªát

JSON format:
{
  "pairs": [
    {
      "word": "T·ª´ ti·∫øng Anh",
      "meaning": "Nghƒ©a ti·∫øng Vi·ªát"
    }
  ],
  "instruction": "H∆∞·ªõng d·∫´n l√†m b√†i t·∫≠p",
  "feedback": {
    "correct": "ƒê√∫ng r·ªìi! Gi·∫£i th√≠ch ng·∫Øn g·ªçn",
    "incorrect": "Sai r·ªìi, th·ª≠ l·∫°i! Gi·∫£i th√≠ch ng·∫Øn g·ªçn",
    "hint": "G·ª£i √Ω ng·∫Øn g·ªçn"
  }
}`,
    
    expected_output_format: {
      pairs: [
        {
          word: "string",
          meaning: "string"
        }
      ],
      instruction: "string",
      feedback: {
        correct: "string",
        incorrect: "string",
        hint: "string"
      }
    },
    
    fallback_template: {
      pairs: [
        {
          word: "Hello",
          meaning: "Xin ch√†o"
        },
        {
          word: "Goodbye",
          meaning: "T·∫°m bi·ªát"
        },
        {
          word: "Thank you",
          meaning: "C·∫£m ∆°n"
        },
        {
          word: "Please",
          meaning: "Xin vui l√≤ng"
        }
      ],
      instruction: "Gh√©p t·ª´ ti·∫øng Anh v·ªõi nghƒ©a ti·∫øng Vi·ªát t∆∞∆°ng ·ª©ng",
      feedback: {
        correct: "Correct! B·∫°n ƒë√£ gh√©p t·ª´ ch√≠nh x√°c.",
        incorrect: "Not quite right. H√£y ki·ªÉm tra l·∫°i t·ª´ng c·∫∑p t·ª´.",
        hint: "ƒê·ªçc k·ªπ t·ª´ng t·ª´ v√† nghƒ©a c·ªßa ch√∫ng."
      }
    }
  }
};

// ===============================================
// AI SERVICE WITH ENHANCED ERROR HANDLING
// ===============================================

export class AIService {
  
  // Generate exercise content using Claude
  static async generateExercise(exerciseType, context) {
    try {
      console.log('ü§ñ Generating exercise:', exerciseType);
      console.log('üìù Context:', context);
      
      // Parse context properly
      const parsedContext = {
        word: context.word || '',
        meaning: context.meaning || '',
        lesson_context: context.lesson_context || '',
        situation: context.situation || 'general',
        user_level: context.user_level || 'A1',
        user_context: context.user_context || context.lesson_context || 'basic English vocabulary',
        skill_focus: context.skill_focus || [],
        topic: context.topic || 'general'
      };
      
      console.log('üìù Parsed context:', parsedContext);
      
      // Handle skill-specific templates
      let actualExerciseType = exerciseType;
      if (exerciseType === 'fill_blank' && parsedContext.skill_focus) {
        const skillFocus = Array.isArray(parsedContext.skill_focus) 
          ? parsedContext.skill_focus[0] 
          : parsedContext.skill_focus;
        actualExerciseType = `fill_blank_${skillFocus}`;
        console.log('üéØ Using skill-specific template:', actualExerciseType);
      } else if (exerciseType === 'true_false' && parsedContext.skill_focus) {
        const skillFocus = Array.isArray(parsedContext.skill_focus) 
          ? parsedContext.skill_focus[0] 
          : parsedContext.skill_focus;
        if (['vocabulary', 'listening', 'grammar'].includes(skillFocus)) {
          actualExerciseType = `true_false_${skillFocus}`;
          console.log('üéØ Using skill-specific true/false template:', actualExerciseType);
        }
      }
      
      const template = EXERCISE_TEMPLATES[actualExerciseType] || EXERCISE_TEMPLATES[exerciseType];
      if (!template) {
        throw new Error(`Unsupported exercise type: ${actualExerciseType}`);
      }
      
      // Replace variables in prompt
      let systemContext = template.system_context;
      let mainPrompt = template.main_prompt;
      
      // Add skill focus specific prompts for true_false
      if (exerciseType === 'true_false' && parsedContext.skill_focus) {
        const skillFocus = Array.isArray(parsedContext.skill_focus) 
          ? parsedContext.skill_focus[0] 
          : parsedContext.skill_focus;
        
        let skillFocusPrompt = '';
        let skillFocusFields = '';
        
        if (skillFocus === 'vocabulary') {
          skillFocusPrompt = 'Skill Focus: Vocabulary - T·∫≠p trung v√†o ki·ªÉm tra hi·ªÉu bi·∫øt t·ª´ v·ª±ng';
          skillFocusFields = `,
  "vocabulary_focus": {
    "target_word": "T·ª´ ch√≠nh ƒë∆∞·ª£c ki·ªÉm tra",
    "word_type": "noun/verb/adjective/adverb",
    "difficulty": "beginner/intermediate/advanced"
  },
  "skill_focus": "vocabulary"`;
        } else if (skillFocus === 'listening') {
          skillFocusPrompt = 'Skill Focus: Listening - T·∫≠p trung v√†o ki·ªÉm tra k·ªπ nƒÉng nghe hi·ªÉu';
          skillFocusFields = `,
  "listening_focus": {
    "audio_content": "M√¥ t·∫£ n·ªôi dung audio",
    "listening_skill": "comprehension/discrimination/intonation",
    "audio_length": "3-10 seconds",
    "difficulty": "beginner/intermediate/advanced"
  },
  "skill_focus": "listening"`;
        } else if (skillFocus === 'grammar') {
          skillFocusPrompt = 'Skill Focus: Grammar - T·∫≠p trung v√†o ki·ªÉm tra ki·∫øn th·ª©c ng·ªØ ph√°p';
          skillFocusFields = `,
  "grammar_focus": {
    "grammar_point": "ƒêi·ªÉm ng·ªØ ph√°p ƒë∆∞·ª£c ki·ªÉm tra",
    "rule_type": "tense/word_order/preposition/article",
    "example_correct": "V√≠ d·ª• c√¢u ƒë√∫ng",
    "difficulty": "beginner/intermediate/advanced"
  },
  "skill_focus": "grammar"`;
        }
        
        mainPrompt = mainPrompt.replace('{skill_focus_prompt}', skillFocusPrompt);
        mainPrompt = mainPrompt.replace('{skill_focus_fields}', skillFocusFields);
      } else {
        mainPrompt = mainPrompt.replace('{skill_focus_prompt}', '');
        mainPrompt = mainPrompt.replace('{skill_focus_fields}', '');
      }
      
      // Replace placeholders with actual values
      Object.keys(parsedContext).forEach(key => {
        const placeholder = `{${key}}`;
        systemContext = systemContext.replace(new RegExp(placeholder, 'g'), parsedContext[key]);
        mainPrompt = mainPrompt.replace(new RegExp(placeholder, 'g'), parsedContext[key]);
      });
      
      // Call Claude API
      const response = await anthropic.messages.create({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 1000,
        temperature: 0.7,
        system: systemContext,
        messages: [
          {
            role: 'user',
            content: mainPrompt
          }
        ]
      });
      
      const content = response.content[0].text;
      console.log('üìù Raw AI response:', content);
      
      // Enhanced JSON parsing
      try {
        const exerciseData = EnhancedJSONParser.parseWithStrategies(content);
        
        // Validate the structure
        const isValid = this.validateExerciseStructure(actualExerciseType, exerciseData);
          
          if (isValid) {
          console.log('‚úÖ Exercise generated successfully:', exerciseData);
            return exerciseData;
          } else {
            console.warn('‚ö†Ô∏è Invalid exercise structure, using fallback');
        }
      } catch (parseError) {
        console.warn('‚ö†Ô∏è All JSON parsing attempts failed:', parseError.message);
        console.log('üìù Original content that failed to parse:', content);
      }
      
      // Use fallback template if parsing fails
      console.log('üîÑ Using fallback template');
      return this.generateFallbackExercise(exerciseType, parsedContext);
      
    } catch (error) {
      console.error('‚ùå Error generating exercise:', error.message);
      return this.generateFallbackExercise(exerciseType, context);
    }
  }
  
  // Validate exercise structure
  static validateExerciseStructure(exerciseType, exerciseData) {
    try {
      if (!exerciseData || typeof exerciseData !== 'object') {
        return false;
      }
      
      // Base validation for all exercise types
      if (exerciseType === 'multiple_choice') {
        return exerciseData.question && 
               Array.isArray(exerciseData.options) && 
               exerciseData.options.length === 4 &&
               typeof exerciseData.correctAnswer === 'number' &&
               exerciseData.feedback &&
               exerciseData.feedback.correct &&
               exerciseData.feedback.incorrect;
      } else if (exerciseType === 'fill_blank' || exerciseType.startsWith('fill_blank_')) {
        return exerciseData.sentence && 
               exerciseData.correctAnswer &&
               exerciseData.feedback &&
               exerciseData.feedback.correct &&
               exerciseData.feedback.incorrect;
      } else if (exerciseType === 'true_false' || exerciseType.startsWith('true_false_')) {
        const baseValid = exerciseData.statement && 
                         typeof exerciseData.isTrue === 'boolean' &&
                         exerciseData.feedback &&
                         exerciseData.feedback.correct &&
                         exerciseData.feedback.incorrect;
        
        // Additional validation for skill-specific true_false
        if (exerciseType === 'true_false_vocabulary') {
          return baseValid && exerciseData.vocabulary_focus;
        } else if (exerciseType === 'true_false_listening') {
          return baseValid && exerciseData.listening_focus;
        } else if (exerciseType === 'true_false_grammar') {
          return baseValid && exerciseData.grammar_focus;
        }
        
        return baseValid;
      } else if (exerciseType === 'translation') {
        return exerciseData.sourceText && 
               exerciseData.targetText &&
               exerciseData.feedback &&
               exerciseData.feedback.correct &&
               exerciseData.feedback.incorrect;
      }
      
      // For other types, just check if we have some basic structure
      return Object.keys(exerciseData).length > 0;
    } catch (error) {
      console.warn('‚ö†Ô∏è Error validating exercise structure:', error.message);
      return false;
    }
  }
  
  // Generate fallback exercise using template
  static generateFallbackExercise(exerciseType, context) {
    // Try skill-specific template first
    let template = EXERCISE_TEMPLATES[exerciseType];
    if (!template && exerciseType.startsWith('fill_blank_')) {
      template = EXERCISE_TEMPLATES['fill_blank'];
    } else if (!template && exerciseType.startsWith('true_false_')) {
      template = EXERCISE_TEMPLATES['true_false'];
    }
    
    if (!template) {
      throw new Error(`Unsupported exercise type: ${exerciseType}`);
    }
    
    const fallback = template.fallback_template;
    
    // Replace variables in fallback
    let result = JSON.parse(JSON.stringify(fallback));
    
    // Customize fallback based on context
    if (context.user_context) {
      if (exerciseType === 'multiple_choice') {
        // Customize question based on user context
        if (context.user_context.includes('ch√†o h·ªèi') || context.user_context.includes('greeting')) {
          result.question = "What is the most common English greeting?";
          result.options = ["Hello", "Goodbye", "Thank you", "Sorry"];
          result.correctAnswer = 0;
          result.feedback.correct = "ƒê√∫ng r·ªìi! Hello l√† c√°ch ch√†o ph·ªï bi·∫øn nh·∫•t.";
          result.feedback.hint = "ƒê√¢y l√† c√°ch ch√†o khi g·∫∑p ai ƒë√≥.";
        }
      } else if (exerciseType === 'fill_blank' || exerciseType.startsWith('fill_blank_')) {
        if (context.user_context.includes('ch√†o h·ªèi') || context.user_context.includes('greeting')) {
          result.sentence = "_____ everyone! Nice to meet you.";
          result.correctAnswer = "Hello";
          result.alternatives = ["Hi", "Hey"];
          result.feedback.correct = "ƒê√∫ng r·ªìi! Hello l√† c√°ch ch√†o ph·ªï bi·∫øn.";
          result.feedback.hint = "T·ª´ ch√†o h·ªèi ph·ªï bi·∫øn nh·∫•t.";
        }
      } else if (exerciseType === 'true_false' || exerciseType.startsWith('true_false_')) {
        if (context.user_context.includes('ch√†o h·ªèi') || context.user_context.includes('greeting')) {
          result.statement = "People say Hello when they meet each other.";
          result.isTrue = true;
          result.feedback.correct = "ƒê√∫ng r·ªìi! Hello l√† c√°ch ch√†o ph·ªï bi·∫øn.";
          result.feedback.hint = "ƒê√¢y l√† c√°ch ch√†o khi g·∫∑p ai ƒë√≥.";
        } else if (context.user_context.includes('s·ªë ƒë·∫øm') || context.user_context.includes('number')) {
          result.statement = "The number after five is seven.";
          result.isTrue = false;
          result.feedback.correct = "ƒê√∫ng r·ªìi! S·ªë sau five (5) l√† six (6), kh√¥ng ph·∫£i seven (7).";
          result.feedback.hint = "H√£y ƒë·∫øm t·ª´ m·ªôt ƒë·∫øn m∆∞·ªùi.";
        }
      } else if (exerciseType === 'translation') {
        if (context.user_context.includes('ch√†o h·ªèi')) {
          result.sourceText = "Good morning! How are you?";
          result.targetText = "Ch√†o bu·ªïi s√°ng! B·∫°n kh·ªèe kh√¥ng?";
          result.feedback.correct = "ƒê√∫ng r·ªìi! B·∫£n d·ªãch ch√≠nh x√°c.";
          result.feedback.hint = "ƒê√¢y l√† c√¢u ch√†o bu·ªïi s√°ng.";
                 } else if (context.user_context.includes('s·ªë ƒë·∫øm')) {
           result.sourceText = "I have three apples.";
           result.targetText = "T√¥i c√≥ ba qu·∫£ t√°o.";
           result.feedback.correct = "ƒê√∫ng r·ªìi! S·ªë ƒë·∫øm ƒë∆∞·ª£c d·ªãch ch√≠nh x√°c.";
           result.feedback.hint = "Ch√∫ √Ω ƒë·∫øn s·ªë ƒë·∫øm trong c√¢u.";
         }
       } else if (exerciseType === 'word_matching') {
         if (context.user_context.includes('ch√†o h·ªèi')) {
           result.pairs = [
             { word: "Hello", meaning: "Xin ch√†o" },
             { word: "Goodbye", meaning: "T·∫°m bi·ªát" },
             { word: "Thank you", meaning: "C·∫£m ∆°n" },
             { word: "Please", meaning: "Xin vui l√≤ng" }
           ];
           result.feedback.correct = "ƒê√∫ng r·ªìi! C√°c t·ª´ ch√†o h·ªèi ƒë∆∞·ª£c gh√©p ch√≠nh x√°c.";
           result.feedback.hint = "ƒê√¢y l√† c√°c t·ª´ ch√†o h·ªèi c∆° b·∫£n.";
         } else if (context.user_context.includes('s·ªë ƒë·∫øm')) {
           result.pairs = [
             { word: "One", meaning: "M·ªôt" },
             { word: "Two", meaning: "Hai" },
             { word: "Three", meaning: "Ba" },
             { word: "Four", meaning: "B·ªën" }
           ];
           result.feedback.correct = "ƒê√∫ng r·ªìi! S·ªë ƒë·∫øm ƒë∆∞·ª£c gh√©p ch√≠nh x√°c.";
           result.feedback.hint = "ƒê√¢y l√† c√°c s·ªë ƒë·∫øm c∆° b·∫£n.";
         }
       }
     }
    
    // Replace any remaining placeholders
    Object.keys(result).forEach(key => {
      if (typeof result[key] === 'string') {
        result[key] = result[key].replace('{word}', context.word || '')
                                 .replace('{meaning}', context.meaning || '')
                                 .replace('{topic}', context.topic || 'general');
      } else if (typeof result[key] === 'object' && result[key] !== null) {
        // Handle nested objects like feedback
        Object.keys(result[key]).forEach(subKey => {
          if (typeof result[key][subKey] === 'string') {
            result[key][subKey] = result[key][subKey].replace('{word}', context.word || '')
                                                     .replace('{meaning}', context.meaning || '')
                                                     .replace('{topic}', context.topic || 'general');
          }
        });
      }
    });
    
    return result;
  }
  
  // Generate multiple exercises for a lesson
  static async generateLessonExercises(lesson, vocabularyList, userLevel = 'beginner') {
    try {
      console.log('üìö Generating exercises for lesson:', lesson.title);
      
      const exercises = [];
      const generationConfig = lesson.exercise_generation || {
        total_exercises: 6,
        exercise_distribution: {
          multiple_choice: 2,
          fill_blank: 2,
          listening: 1,
          translation: 1
        }
      };
      
      // Generate exercises based on distribution
      for (const [exerciseType, count] of Object.entries(generationConfig.exercise_distribution)) {
        for (let i = 0; i < count; i++) {
          try {
          // Select vocabulary for this exercise
          const vocabIndex = i % vocabularyList.length;
          const vocabulary = vocabularyList[vocabIndex];
          
          const context = {
            word: vocabulary.word,
            meaning: vocabulary.meaning,
            lesson_context: lesson.lesson_context?.situation || lesson.title,
            situation: lesson.lesson_context?.situation || 'general',
            user_level: userLevel
          };
          
          const exerciseContent = await this.generateExercise(exerciseType, context);
          
          exercises.push({
            type: exerciseType,
            content: exerciseContent,
            vocabulary: vocabulary,
            sortOrder: exercises.length + 1
          });
            
            // Add delay between requests to avoid rate limiting
            await new Promise(resolve => setTimeout(resolve, 1000));
            
          } catch (error) {
            console.error(`‚ùå Error generating ${exerciseType} exercise ${i + 1}:`, error.message);
            // Continue with next exercise instead of failing completely
          }
        }
      }
      
      console.log(`‚úÖ Generated ${exercises.length} exercises`);
      return exercises;
      
    } catch (error) {
      console.error('‚ùå Error generating lesson exercises:', error.message);
      throw error;
    }
  }
  
  // Validate exercise content
  static validateExerciseContent(exerciseType, content) {
    const template = EXERCISE_TEMPLATES[exerciseType];
    if (!template) return false;
    
    const expectedFormat = template.expected_output_format;
    
    // Basic validation - check if required fields exist
    for (const field of Object.keys(expectedFormat)) {
      if (!(field in content)) {
        console.warn(`‚ö†Ô∏è Missing field: ${field}`);
        return false;
      }
    }
    
    // Specific validation for each exercise type
    if (exerciseType === 'multiple_choice') {
      return content.options && 
             Array.isArray(content.options) && 
             content.options.length === 4 &&
             typeof content.correctAnswer === 'number' &&
             content.correctAnswer >= 0 && 
             content.correctAnswer < 4;
    } else if (exerciseType === 'fill_blank') {
      return content.sentence && 
             content.correctAnswer &&
             content.feedback &&
             content.feedback.correct &&
             content.feedback.incorrect;
    } else if (exerciseType === 'true_false' || exerciseType.startsWith('true_false_')) {
      return content.statement && 
             typeof content.isTrue === 'boolean' &&
             content.feedback &&
             content.feedback.correct &&
             content.feedback.incorrect;
         } else if (exerciseType === 'translation') {
       return content.sourceText && 
              content.targetText &&
              content.feedback &&
              content.feedback.correct &&
              content.feedback.incorrect;
     } else if (exerciseType === 'word_matching') {
       return content.pairs && 
              Array.isArray(content.pairs) && 
              content.pairs.length >= 3 &&
              content.pairs.every(pair => pair.word && pair.meaning) &&
              content.feedback &&
              content.feedback.correct &&
              content.feedback.incorrect;
    }
    
    return true;
  }
}

export default AIService; 