// ===============================================
// EXERCISE MODEL - LINGUALEAP
// ===============================================

import mongoose from "mongoose";

const { Schema } = mongoose;

// Define the 28 exercise subtypes
const EXERCISE_SUBTYPES = [
  // Multiple Choice subtypes (4)
  'vocabulary_multiple_choice',
  'grammar_multiple_choice', 
  'listening_multiple_choice',
  'pronunciation_multiple_choice',
  
  // Fill Blank subtypes (4)
  'vocabulary_fill_blank',
  'grammar_fill_blank',
  'listening_fill_blank',
  'writing_fill_blank',
  
  // Translation subtypes (3)
  'vocabulary_translation',
  'grammar_translation',
  'writing_translation',
  
  // Word Matching subtypes (1)
  'vocabulary_word_matching',
  
  // Sentence Building subtypes (3)
  'vocabulary_sentence_building',
  'grammar_sentence_building',
  'writing_sentence_building',
  
  // Listening subtypes (1)
  'vocabulary_listening',
  
  // Speaking subtypes (3)
  'vocabulary_speaking',
  'pronunciation_speaking',
  'fluency_speaking',
  
  // Reading subtypes (3)
  'vocabulary_reading',
  'grammar_reading',
  'fluency_reading',
  
  // True/False subtypes (3)
  'vocabulary_true_false',
  'grammar_true_false',
  'listening_true_false',
  
  // Drag & Drop subtypes (3)
  'vocabulary_drag_drop',
  'grammar_drag_drop',
  'writing_drag_drop'
];

export const ExerciseSchema = new Schema(
  {
    // Basic Information
    title: {
      type: String,
      trim: true,
      maxlength: 200
    },
    instruction: {
      type: String,
      required: true,
      trim: true,
      maxlength: 500
    },
    
    // Exercise Type Display - NEW FIELD
    type_display_name: {
      type: String,
      trim: true,
      maxlength: 100,
      default: "Bài tập"
    },
    
    // EXERCISE SUBTYPE - NEW FIELD
    exercise_subtype: {
      type: String,
      enum: EXERCISE_SUBTYPES,
      index: true,
      // Will be auto-generated by pre-save middleware
    },
    
    // Relationships
    courseId: {
      type: Schema.Types.ObjectId,
      ref: 'Course',
      required: true,
      index: true
    },
    unitId: {
      type: Schema.Types.ObjectId,
      ref: 'Unit',
      required: true,
      index: true
    },
    lessonId: {
      type: Schema.Types.ObjectId,
      ref: 'Lesson',
      required: true,
      index: true
    },
    
    // Exercise Type
    type: {
      type: String,
      required: true,
      enum: [
        'multiple_choice',      // Chọn đáp án đúng
        'fill_blank',          // Điền từ vào chỗ trống
        'listening',           // Nghe và chọn/viết
        'translation',         // Dịch Việt-Anh hoặc Anh-Việt
        'speaking',            // Luyện phát âm
        'reading',             // Đọc hiểu
        'word_matching',       // Ghép từ với nghĩa
        'sentence_building',   // Sắp xếp từ thành câu
        'true_false',          // Đúng/Sai
        'drag_drop',           // Kéo thả
        'listen_choose',       // Nghe và chọn hình ảnh
        'speak_repeat'         // Nói và lặp lại
      ],
      index: true
    },
    
    // AI PROMPT TEMPLATE - NEW FIELD
    prompt_template: {
      system_context: {
        type: String,
        trim: true,
        maxlength: 1000
      },
      main_prompt: {
        type: String,
        trim: true,
        maxlength: 2000
      },
      variables: [{
        type: String,
        trim: true
      }],
      expected_output_format: {
        type: Schema.Types.Mixed,
        default: {}
      },
      fallback_template: {
        type: Schema.Types.Mixed,
        default: {}
      }
    },
    
    // GENERATION RULES - NEW FIELD
    generation_rules: {
      max_attempts: {
        type: Number,
        default: 3,
        min: 1,
        max: 5
      },
      validation_rules: [{
        type: String,
        trim: true
      }],
      difficulty_adaptation: {
        type: Boolean,
        default: true
      },
      content_filters: [{
        type: String,
        trim: true
      }]
    },
    
    // SKILL FOCUS - NEW FIELD
    skill_focus: [{
      type: String,
      enum: ['vocabulary', 'listening', 'pronunciation', 'grammar', 'reading', 'speaking', 'writing'],
      required: true
    }],
    
    // Exercise Content - Base Fields
    question: {
      text: {
        type: String,
        required: true
      },
      audioUrl: String,
      imageUrl: String,
      videoUrl: String
    },
    
    // Type-specific Content - Sử dụng Mixed type để tránh validation issues
    content: {
      type: Schema.Types.Mixed,
      default: {}
    },
    
    wordMatching: {
      pairs: [{
        word: {
          type: String,
          required: true
        },
        meaning: {
          type: String,
          required: true
        },
        audioUrl: String
      }]
    },
    
    sentenceBuilding: {
      targetSentence: {
        type: String,
        required: false
      },
      words: [String], // Shuffled words
      translation: String
    },
    
    // Scoring & Feedback
    maxScore: {
      type: Number,
      default: 100
    },
    difficulty: {
      type: String,
      enum: ['beginner', 'intermediate', 'advanced'],
      default: 'beginner'
    },
    
    // Feedback Messages
    feedback: {
      correct: {
        type: String,
        default: 'Correct! Well done!'
      },
      incorrect: {
        type: String,
        default: 'Not quite right. Try again!'
      },
      hint: String
    },
    
    // Timing
    timeLimit: {
      type: Number, // Seconds, null = no limit
      default: null
    },
    estimatedTime: {
      type: Number, // Seconds
      default: 30
    },
    
    // AUDIO REQUIREMENTS - NEW FIELDS
    requires_audio: {
      type: Boolean,
      default: false
    },
    requires_microphone: {
      type: Boolean,
      default: false
    },
    
    // Gamification
    xpReward: {
      type: Number,
      default: 5
    },
    
    // Access Control
    isPremium: {
      type: Boolean,
      default: false
    },
    isActive: {
      type: Boolean,
      default: true
    },
    
    // Ordering
    sortOrder: {
      type: Number,
      required: true,
      index: true
    },
    
    // Statistics
    totalAttempts: {
      type: Number,
      default: 0
    },
    correctAttempts: {
      type: Number,
      default: 0
    },
    averageTime: {
      type: Number,
      default: 0
    },
    
    // Admin Fields
    createdBy: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true
    },
    lastUpdatedBy: {
      type: Schema.Types.ObjectId,
      ref: 'User'
    },
    
    // Tags for categorization
    tags: [String]
  },
  {
    timestamps: true,
    collection: 'exercises'
  }
);

// Indexes for better performance
ExerciseSchema.index({ lessonId: 1, sortOrder: 1 });
ExerciseSchema.index({ type: 1, difficulty: 1 });
ExerciseSchema.index({ unitId: 1, type: 1 });
ExerciseSchema.index({ courseId: 1, isPremium: 1 });
ExerciseSchema.index({ skill_focus: 1 }); // NEW INDEX
ExerciseSchema.index({ exercise_subtype: 1 }); // NEW INDEX for subtype

// PRE-SAVE MIDDLEWARE: Auto-generate exercise_subtype
ExerciseSchema.pre('save', function(next) {
  // Only generate subtype if it's not already set
  if (!this.exercise_subtype) {
    this.exercise_subtype = this.generateSubtype();
  }
  next();
});

// Method to generate subtype based on type and skill_focus
ExerciseSchema.methods.generateSubtype = function() {
  const type = this.type;
  const skillFocus = this.skill_focus && this.skill_focus.length > 0 ? this.skill_focus[0] : 'vocabulary';
  
  // Map type + skill_focus to subtype
  const subtypeMap = {
    'multiple_choice': {
      'vocabulary': 'vocabulary_multiple_choice',
      'grammar': 'grammar_multiple_choice',
      'listening': 'listening_multiple_choice',
      'pronunciation': 'pronunciation_multiple_choice',
      'reading': 'vocabulary_multiple_choice', // Default to vocabulary
      'speaking': 'vocabulary_multiple_choice', // Default to vocabulary
      'writing': 'vocabulary_multiple_choice'  // Default to vocabulary
    },
    'fill_blank': {
      'vocabulary': 'vocabulary_fill_blank',
      'grammar': 'grammar_fill_blank',
      'listening': 'listening_fill_blank',
      'writing': 'writing_fill_blank',
      'reading': 'vocabulary_fill_blank', // Default to vocabulary
      'pronunciation': 'vocabulary_fill_blank', // Default to vocabulary
      'speaking': 'vocabulary_fill_blank'  // Default to vocabulary
    },
    'translation': {
      'vocabulary': 'vocabulary_translation',
      'grammar': 'grammar_translation',
      'writing': 'writing_translation',
      'reading': 'vocabulary_translation', // Default to vocabulary
      'listening': 'vocabulary_translation', // Default to vocabulary
      'pronunciation': 'vocabulary_translation', // Default to vocabulary
      'speaking': 'vocabulary_translation'  // Default to vocabulary
    },
    'word_matching': {
      'vocabulary': 'vocabulary_word_matching',
      'grammar': 'vocabulary_word_matching', // Default to vocabulary
      'listening': 'vocabulary_word_matching', // Default to vocabulary
      'reading': 'vocabulary_word_matching', // Default to vocabulary
      'speaking': 'vocabulary_word_matching', // Default to vocabulary
      'writing': 'vocabulary_word_matching', // Default to vocabulary
      'pronunciation': 'vocabulary_word_matching'  // Default to vocabulary
    },
    'sentence_building': {
      'vocabulary': 'vocabulary_sentence_building',
      'grammar': 'grammar_sentence_building',
      'writing': 'writing_sentence_building',
      'reading': 'vocabulary_sentence_building', // Default to vocabulary
      'listening': 'vocabulary_sentence_building', // Default to vocabulary
      'speaking': 'vocabulary_sentence_building', // Default to vocabulary
      'pronunciation': 'vocabulary_sentence_building'  // Default to vocabulary
    },
    'listening': {
      'vocabulary': 'vocabulary_listening',
      'grammar': 'vocabulary_listening', // Default to vocabulary
      'reading': 'vocabulary_listening', // Default to vocabulary
      'speaking': 'vocabulary_listening', // Default to vocabulary
      'writing': 'vocabulary_listening', // Default to vocabulary
      'pronunciation': 'vocabulary_listening'  // Default to vocabulary
    },
    'speaking': {
      'vocabulary': 'vocabulary_speaking',
      'pronunciation': 'pronunciation_speaking',
      'fluency': 'fluency_speaking',
      'grammar': 'vocabulary_speaking', // Default to vocabulary
      'reading': 'vocabulary_speaking', // Default to vocabulary
      'listening': 'vocabulary_speaking', // Default to vocabulary
      'writing': 'vocabulary_speaking'  // Default to vocabulary
    },
    'reading': {
      'vocabulary': 'vocabulary_reading',
      'grammar': 'grammar_reading',
      'fluency': 'fluency_reading',
      'listening': 'vocabulary_reading', // Default to vocabulary
      'speaking': 'vocabulary_reading', // Default to vocabulary
      'writing': 'vocabulary_reading', // Default to vocabulary
      'pronunciation': 'vocabulary_reading'  // Default to vocabulary
    },
    'true_false': {
      'vocabulary': 'vocabulary_true_false',
      'grammar': 'grammar_true_false',
      'listening': 'listening_true_false',
      'reading': 'vocabulary_true_false', // Default to vocabulary
      'speaking': 'vocabulary_true_false', // Default to vocabulary
      'writing': 'vocabulary_true_false', // Default to vocabulary
      'pronunciation': 'vocabulary_true_false'  // Default to vocabulary
    },
    'drag_drop': {
      'vocabulary': 'vocabulary_drag_drop',
      'grammar': 'grammar_drag_drop',
      'writing': 'writing_drag_drop',
      'reading': 'vocabulary_drag_drop', // Default to vocabulary
      'listening': 'vocabulary_drag_drop', // Default to vocabulary
      'speaking': 'vocabulary_drag_drop', // Default to vocabulary
      'pronunciation': 'vocabulary_drag_drop'  // Default to vocabulary
    },
    'listen_choose': {
      'vocabulary': 'vocabulary_listening', // Map to listening
      'grammar': 'vocabulary_listening', // Map to listening
      'reading': 'vocabulary_listening', // Map to listening
      'speaking': 'vocabulary_listening', // Map to listening
      'writing': 'vocabulary_listening', // Map to listening
      'pronunciation': 'vocabulary_listening', // Map to listening
      'listening': 'vocabulary_listening'  // Map to listening
    },
    'speak_repeat': {
      'vocabulary': 'vocabulary_speaking', // Map to speaking
      'pronunciation': 'pronunciation_speaking', // Map to pronunciation
      'fluency': 'fluency_speaking', // Map to fluency
      'grammar': 'vocabulary_speaking', // Default to vocabulary
      'reading': 'vocabulary_speaking', // Default to vocabulary
      'listening': 'vocabulary_speaking', // Default to vocabulary
      'writing': 'vocabulary_speaking'  // Default to vocabulary
    }
  };
  
  // Get the subtype mapping for this type
  const typeMapping = subtypeMap[type];
  if (!typeMapping) {
    console.warn(`⚠️ No subtype mapping found for type: ${type}, defaulting to vocabulary`);
    return 'vocabulary_multiple_choice'; // Safe default
  }
  
  // Get the specific subtype for this skill focus
  const subtype = typeMapping[skillFocus];
  if (!subtype) {
    console.warn(`⚠️ No subtype mapping found for type: ${type}, skill: ${skillFocus}, defaulting to vocabulary`);
    return typeMapping['vocabulary'] || 'vocabulary_multiple_choice'; // Fallback to vocabulary
  }
  
  console.log(`🎯 Generated subtype: ${subtype} for type: ${type}, skill: ${skillFocus}`);
  return subtype;
};

// Method to validate content based on subtype
ExerciseSchema.methods.validateContentBySubtype = function() {
  const subtype = this.exercise_subtype;
  const content = this.content;
  
  if (!subtype || !content) {
    return { valid: false, error: 'Missing subtype or content' };
  }
  
  // Define validation rules for each subtype
  const validationRules = {
    // Multiple Choice subtypes
    'vocabulary_multiple_choice': {
      required: ['question', 'options', 'correctAnswer'],
      optional: ['feedback', 'vocabulary']
    },
    'grammar_multiple_choice': {
      required: ['question', 'options', 'correctAnswer'],
      optional: ['feedback', 'grammar']
    },
    'listening_multiple_choice': {
      required: ['question', 'options', 'correctAnswer', 'audioText'],
      optional: ['feedback', 'listening']
    },
    'pronunciation_multiple_choice': {
      required: ['question', 'options', 'correctAnswer'],
      optional: ['feedback', 'pronunciation']
    },
    
    // Fill Blank subtypes
    'vocabulary_fill_blank': {
      required: ['sentence', 'correctAnswer'],
      optional: ['alternatives', 'feedback', 'vocabulary']
    },
    'grammar_fill_blank': {
      required: ['sentence', 'correctAnswer'],
      optional: ['alternatives', 'feedback', 'grammar']
    },
    'listening_fill_blank': {
      required: ['sentence', 'correctAnswer', 'listening'],
      optional: ['alternatives', 'feedback']
    },
    'writing_fill_blank': {
      required: ['sentence', 'correctAnswer'],
      optional: ['alternatives', 'feedback', 'writing']
    },
    
    // Translation subtypes
    'vocabulary_translation': {
      required: ['sourceText', 'correctTranslation'],
      optional: ['alternatives', 'feedback']
    },
    'grammar_translation': {
      required: ['sourceText', 'correctTranslation'],
      optional: ['alternatives', 'feedback', 'grammar']
    },
    'writing_translation': {
      required: ['sourceText', 'correctTranslation'],
      optional: ['alternatives', 'feedback', 'writing']
    },
    
    // Word Matching subtypes
    'vocabulary_word_matching': {
      required: ['pairs'],
      optional: ['instruction', 'feedback']
    },
    
    // Sentence Building subtypes
    'vocabulary_sentence_building': {
      required: ['targetSentence', 'shuffledWords'],
      optional: ['translation', 'hint', 'feedback']
    },
    'grammar_sentence_building': {
      required: ['targetSentence', 'shuffledWords'],
      optional: ['translation', 'hint', 'feedback', 'grammar']
    },
    'writing_sentence_building': {
      required: ['targetSentence', 'shuffledWords'],
      optional: ['translation', 'hint', 'feedback', 'writing']
    },
    
    // Listening subtypes
    'vocabulary_listening': {
      required: ['audioText', 'question', 'options', 'correctAnswer'],
      optional: ['feedback', 'listening']
    },
    
    // Speaking subtypes
    'vocabulary_speaking': {
      required: ['textToSpeak'],
      optional: ['phonetic', 'audioUrl', 'feedback']
    },
    'pronunciation_speaking': {
      required: ['textToSpeak', 'phonetic'],
      optional: ['audioUrl', 'evaluationCriteria', 'acceptableVariations', 'feedback']
    },
    'fluency_speaking': {
      required: ['textToSpeak'],
      optional: ['phonetic', 'audioUrl', 'evaluationCriteria', 'feedback']
    },
    
    // Reading subtypes
    'vocabulary_reading': {
      required: ['text', 'question', 'options', 'correctAnswer'],
      optional: ['feedback', 'reading']
    },
    'grammar_reading': {
      required: ['text', 'question', 'options', 'correctAnswer'],
      optional: ['feedback', 'grammar']
    },
    'fluency_reading': {
      required: ['text', 'question', 'options', 'correctAnswer'],
      optional: ['feedback', 'fluency']
    },
    
    // True/False subtypes
    'vocabulary_true_false': {
      required: ['statement', 'isCorrect'],
      optional: ['explanation', 'feedback']
    },
    'grammar_true_false': {
      required: ['statement', 'isCorrect'],
      optional: ['explanation', 'feedback', 'grammar']
    },
    'listening_true_false': {
      required: ['statement', 'isCorrect', 'audioText'],
      optional: ['explanation', 'feedback']
    },
    
    // Drag & Drop subtypes
    'vocabulary_drag_drop': {
      required: ['items', 'targets'],
      optional: ['instruction', 'feedback']
    },
    'grammar_drag_drop': {
      required: ['items', 'targets'],
      optional: ['instruction', 'feedback', 'grammar']
    },
    'writing_drag_drop': {
      required: ['items', 'targets'],
      optional: ['instruction', 'feedback', 'writing']
    }
  };
  
  const rules = validationRules[subtype];
  if (!rules) {
    return { valid: false, error: `No validation rules for subtype: ${subtype}` };
  }
  
  // Check required fields
  for (const field of rules.required) {
    if (!content[field]) {
      return { valid: false, error: `Missing required field: ${field}` };
    }
  }
  
  return { valid: true };
};

// Virtual for success rate
ExerciseSchema.virtual('successRate').get(function() {
  if (this.totalAttempts === 0) return 0;
  return Math.round((this.correctAttempts / this.totalAttempts) * 100);
});

// Virtual for user status
ExerciseSchema.virtual('userAnswer').get(function() {
  return this._userAnswer || null;
});

ExerciseSchema.virtual('isCorrect').get(function() {
  return this._isCorrect || false;
});

ExerciseSchema.virtual('userScore').get(function() {
  return this._userScore || 0;
});

// Ensure virtual fields are serialized
ExerciseSchema.set('toJSON', { virtuals: true });
ExerciseSchema.set('toObject', { virtuals: true });

// ===============================================
// PRE-SAVE MIDDLEWARE - AUTO-GENERATE SUBTYPE
// ===============================================

ExerciseSchema.pre('save', function(next) {
  // Only auto-generate if exercise_subtype is not set
  if (!this.exercise_subtype) {
    this.exercise_subtype = this._generateSubtype();
  }
  next();
});

// Method to generate exercise subtype based on type and skill_focus
ExerciseSchema.methods._generateSubtype = function() {
  const type = this.type || '';
  const skillFocus = this.skill_focus || [];
  
  // Get primary skill focus
  const primarySkill = skillFocus.length > 0 ? skillFocus[0] : 'vocabulary';
  
  // Map type + skill to subtype
  const subtypeMap = {
    'multiple_choice': {
      'vocabulary': 'vocabulary_multiple_choice',
      'grammar': 'grammar_multiple_choice',
      'listening': 'listening_multiple_choice',
      'pronunciation': 'pronunciation_multiple_choice',
      'reading': 'vocabulary_reading',
      'writing': 'vocabulary_writing',
      'speaking': 'vocabulary_speaking'
    },
    'fill_blank': {
      'vocabulary': 'vocabulary_fill_blank',
      'grammar': 'grammar_fill_blank',
      'listening': 'listening_fill_blank',
      'pronunciation': 'pronunciation_speaking',
      'reading': 'vocabulary_reading',
      'writing': 'writing_fill_blank',
      'speaking': 'vocabulary_speaking'
    },
    'translation': {
      'vocabulary': 'vocabulary_translation',
      'grammar': 'grammar_translation',
      'pronunciation': 'pronunciation_speaking',
      'reading': 'vocabulary_reading',
      'writing': 'writing_translation',
      'speaking': 'vocabulary_speaking'
    },
    'word_matching': {
      'vocabulary': 'vocabulary_word_matching',
      'grammar': 'grammar_word_matching',
      'listening': 'vocabulary_listening',
      'pronunciation': 'pronunciation_speaking',
      'reading': 'vocabulary_reading',
      'writing': 'vocabulary_writing',
      'speaking': 'vocabulary_speaking'
    },
    'sentence_building': {
      'vocabulary': 'vocabulary_sentence_building',
      'grammar': 'grammar_sentence_building',
      'pronunciation': 'pronunciation_speaking',
      'reading': 'vocabulary_reading',
      'writing': 'writing_sentence_building',
      'speaking': 'vocabulary_speaking'
    },
    'listening': {
      'vocabulary': 'vocabulary_listening',
      'grammar': 'grammar_listening',
      'pronunciation': 'pronunciation_listening',
      'reading': 'vocabulary_reading',
      'writing': 'vocabulary_writing',
      'speaking': 'vocabulary_speaking'
    },
    'speaking': {
      'vocabulary': 'vocabulary_speaking',
      'grammar': 'grammar_speaking',
      'pronunciation': 'pronunciation_speaking',
      'reading': 'vocabulary_reading',
      'writing': 'vocabulary_writing',
      'fluency': 'fluency_speaking'
    },
    'reading': {
      'vocabulary': 'vocabulary_reading',
      'grammar': 'grammar_reading',
      'pronunciation': 'pronunciation_speaking',
      'fluency': 'fluency_reading',
      'writing': 'vocabulary_writing',
      'speaking': 'vocabulary_speaking'
    },
    'true_false': {
      'vocabulary': 'vocabulary_true_false',
      'grammar': 'grammar_true_false',
      'listening': 'listening_true_false',
      'pronunciation': 'pronunciation_speaking',
      'reading': 'vocabulary_reading',
      'writing': 'vocabulary_writing',
      'speaking': 'vocabulary_speaking'
    },
    'drag_drop': {
      'vocabulary': 'vocabulary_drag_drop',
      'grammar': 'grammar_drag_drop',
      'pronunciation': 'pronunciation_speaking',
      'reading': 'vocabulary_reading',
      'writing': 'writing_drag_drop',
      'speaking': 'vocabulary_speaking'
    }
  };
  
  // Get subtype from map
  const typeMap = subtypeMap[type] || {};
  const subtype = typeMap[primarySkill] || `${primarySkill}_${type}`;
  
  // Validate that the generated subtype is in our enum
  if (!EXERCISE_SUBTYPES.includes(subtype)) {
    console.warn(`Generated subtype "${subtype}" not in enum, using fallback`);
    return 'vocabulary_multiple_choice'; // Fallback
  }
  
  return subtype;
};

// ===============================================
// INDEXES FOR PERFORMANCE
// ===============================================

// Compound index for lesson exercises
ExerciseSchema.index({ lessonId: 1, sortOrder: 1 });

// Compound index for skill-based queries
ExerciseSchema.index({ exercise_subtype: 1, difficulty: 1 });

// Compound index for progress tracking
ExerciseSchema.index({ lessonId: 1, isActive: 1, sortOrder: 1 });

// Text index for search
ExerciseSchema.index({ 
  title: 'text', 
  instruction: 'text',
  'content.question.text': 'text'
});